---
title: "Chapter 4"
subtitle: "Geocentric Models"
format: 
  html: 
    theme: cosmo
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)        # ggplot, dplyr, and friends
library(parameters)       # Show model results as nice tables
library(scales)           # Nicer labeling functions
library(brms)             # The best formula-based interface to Stan
library(tidybayes)        # Manipulate Stan results in tidy ways
library(ggdist)           # Fancy distribution plots
library(patchwork)        # Combine ggplot plots
library(rcartocolor)      # Color palettes from CARTOColors 
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# Custom ggplot theme which i stole from https://www.andrewheiss.com/blog/2023/08/12/conjoint-multilevel-multinomial-guide/#part-1-candy-single-question-basic-multinomial-logit

theme_nice <- function() {
  theme_minimal(base_family = "Clear Sans") +
    theme(panel.grid.minor = element_blank(),
          plot.title = element_text(family = "Clear Sans", face = "bold"),
          axis.title.x = element_text(hjust = 0),
          axis.title.y = element_text(hjust = 1),
          strip.text = element_text(family = "Clear Sans", face = "bold",
                                    size = rel(0.75), hjust = 0),
          plot.title.position = "plot",
          strip.background = element_rect(fill = "grey90", color = NA))
}

theme_set(theme_nice())

clrs <- carto_pal(name = "Prism")

# Functions for formatting things as percentage points
label_pp <- label_number(accuracy = 1, scale = 100, 
                         suffix = " pp.", style_negative = "minus")
```


Linear regression as a baseline thing to learn.
gaussian

Everything that adds together fluctu<ation will sooner or later become gaussian.
Does not have to be purely additive

```{r}
pos <- replicate(1000, sum(runif(16,-1,1)))
hist(pos)
rethinking::dens(pos)
```

$$
W \sim Binomial(N,p) \\
p \sim Uniform(0,1)
$$

## time to model

```{r}
data(Howell1,package = "rethinking")
d <- Howell1

glimpse(d)

p1 <- 
d |> 
  ggplot(aes(x = weight, y = height)) +
  geom_point(col = clrs[9]) +
  geom_smooth(method = "loess", se = F, col = clrs[3]) +
  labs(x = "Weight",
       y = "Height",
       title = "Relationship between weight and height \nfor the whole data",
       subtitle = "Clearly non-linear")

d_2 <- d |> filter(age >= 18)

p2 <- 
  d_2 |> 
  ggplot(aes(x = weight, y = height)) +
  geom_smooth(method = "lm", se = F, col = clrs[3]) +
  geom_point(col = clrs[1]) +
  labs(x = "Weight",
       y = "Height",
       title = "Relationship between weight and height \nfor adults",
       subtitle = "More linear")

p1 + p2

ggplot(d_2, mapping = aes(height)) +
  geom_density() +
  labs(title = "Yeah, looks gaussian to me")
```

$$
h_i \sim N(\mu, \sigma) \\
\mu \sim N(178,20) \\
\sigma \sim Uniform(0,50)
$$
plot those priors

```{r}
p1 <- 
tibble(x = seq(100, 250, length.out = 1000))  |> 
  mutate(y = dnorm(x, mean = 178, sd = 20)) |> 
# Plotting
ggplot(aes(x = x, y = y)) +
  geom_line() +
  labs(title = bquote("Prior for " ~ mu),
       x = expression(mu),
       y = "Density") 
p2 <- 
tibble(x = seq(-10, 60, length.out = 1000))  |> 
  mutate(y = dunif(x,0,50)) |> 
# Plotting
ggplot(aes(x = x, y = y)) +
  geom_line() +
  labs(title = bquote("Prior for " ~ sigma),
       x = expression(sigma),
       y = "Density") 
p1 + p2
```

Prior predictive check:

```{r}
p3 <- 
tibble(
  mu = rnorm(1e4,178,20),
  sigma = runif(1e4,0,50),
  prior = rnorm(1e4,mu, sigma)
) |> 
  ggplot(aes(prior)) +
  geom_density(col = "darkorange4") +
  labs(x = NULL, y = NULL, title = "h ~ dnorm(mu, sigma)")

p4 <- 
tibble(
  mu = rnorm(1e4,178,100),
  sigma = runif(1e4,0,50),
  prior = rnorm(1e4,mu, sigma)
) |> 
  ggplot(aes(prior)) +
  geom_density(col = "darkorange4") +
  geom_vline(xintercept = 0,lty = "dashed") +
  geom_vline(xintercept = 272, alpha = .9) +
  scale_x_continuous(breaks = c(-128,0,178,484)) +
  labs(x = NULL, y = NULL, title = "h ~ dnorm(mu, sigma)\nmu ~ dnorm(178,100)")

(p1 + p2) / (p3 + p4)
```

```{r}
b1 <- brm(
  data = d_2,
  family = gaussian,
  height ~ 1,
  prior = c(prior(normal(178, 20), class = Intercept),
                prior(uniform(0, 50), class = sigma, ub = 50)),
      iter = 2000, warmup = 1000, chains = 4,
      seed = 4)

b1 |> 
  spread_draws(b_Intercept, sigma) |> 
  median_qi(.width = .89) |> 
  select(b_Intercept, sigma, .width) |> 
  knitr::kable(digits = 3)

b2 <- brm(
  data = d_2,
  family = gaussian,
  height ~ 1,
  prior = c(prior(normal(178, .1), class = Intercept),
                prior(uniform(0, 50), class = sigma, ub = 50)),
      iter = 2000, warmup = 1000, chains = 4,
      seed = 4)

b2 |> 
  spread_draws(b_Intercept, sigma) |> 
  median_qi(.width = .89) |> 
  select(b_Intercept, sigma, .width) |> 
  knitr::kable(digits = 2)

b2 |> 
  spread_draws(b_Intercept, sigma) %>%
  median_qi(condition_mean = b_Intercept + sigma, .width = c(.95)) %>%
  ggplot(aes(x = condition_mean)) +
  stat_halfeye()
```

## Linear Prediction

```{r}
set.seed(2971)
# how many lines would you like?
n_lines <- 100

lines <-
  tibble(n = 1:n_lines,
         a = rnorm(n_lines, mean = 178, sd = 20),
         b = rnorm(n_lines, mean = 0, sd = 10)) %>% 
  expand_grid(weight = range(d2$weight)) %>% 
  mutate(height = a + b * (weight - mean(d2$weight)))

head(lines)

set.seed(2971)
n_l <- 100
lines <- 
  tibble(
    n = 1:n_l,
    a = rnorm(n = n, 178, 20),
    b = rnorm(n, 0, 10)
  ) |> 
  expand_grid(weight = range(d_2$weight)) |> 
  mutate(height = a + b * (weight - mean(d_2$weight)))

p1 <- 
lines |> 
  ggplot(aes(x = weight, y = height, group = n)) +
  geom_hline(yintercept = c(0, 272),
             linetype = 2:1, linewidth = 1/3) +
  geom_line(alpha = 5/10, col = clrs[11]) +
  coord_cartesian(ylim = c(-100, 400)) +
  labs(title = "b ~ dnorm(0,10)")

lines <- 
  tibble(
    n = 1:n_l,
    a = rnorm(n = n, 178, 20),
    b = rlnorm(n, 0, 1)
  ) |> 
  expand_grid(weight = range(d_2$weight)) |> 
  mutate(height = a + b * (weight - mean(d_2$weight)))

text <-
  tibble(weight = c(34, 43),
         height = c(0 - 25, 272 + 25),
         label  = c("Embryo", "World's tallest person (272 cm)"))


p2 <- lines |> 
  ggplot(aes(x = weight, y = height, group = n)) +
  geom_hline(yintercept = c(0, 272),
             linetype = 2:1, linewidth = 1/3) +
  geom_line(alpha = 5/10, col = clrs[11]) +
  geom_text(data = text, 
            aes(label = label),
            size = 5) +
  coord_cartesian(ylim = c(-100, 400)) +
  labs(title = "log(b) ~ dnorm(0,1)")

p1 + p2
```

```{r}
d_2 <- d_2 |> 
  mutate(weight_c = weight - mean(weight))

b3 <- brm(
  data = d_2,
  family = gaussian,
      height ~ 1 + weight_c,
      prior = c(prior(normal(178, 20), class = Intercept),
                prior(lognormal(0, 1), class = b),
                prior(uniform(0, 50), class = sigma, ub = 50)),
      iter = 2000, warmup = 1000, chains = 4,
      seed = 4)
```

```{r}
plot(b3)

model_parameters(b3,
                 ci = .89)

pairs(b3)

labels <-
  c(-10, 0, 10) + mean(d_2$weight) |> 
  round(digits = 0)

d_2 |> 
  ggplot(aes(weight_c, height)) +
  geom_abline(intercept = fixef(b3)[1], 
              slope     = fixef(b3)[2],
              col = "firebrick", size = .5) +
  geom_point(shape = 1, size = 2, color = "royalblue") +
  scale_x_continuous("weight",
                     breaks = c(-10, 0, 10),
                     labels = labels) +
  labs(title = "Our cute little model",
       x = "Weight (centred)",
       y = "Height")
```

